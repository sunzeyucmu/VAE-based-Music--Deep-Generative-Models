VQVAE model structure:
VQVAE(
  (encoders): ModuleList(
    (0): Encoder(
      (level_blocks): ModuleList(
        (0): EncoderConvBlock(
          (model): Sequential(
            (0): Sequential(
              (0): Conv1d(1, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (1): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (2): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (3): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (4): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (5): Conv1d(32, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
      )
    )
    (1): Encoder(
      (level_blocks): ModuleList(
        (0): EncoderConvBlock(
          (model): Sequential(
            (0): Sequential(
              (0): Conv1d(1, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (1): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (2): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (3): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (4): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (5): Conv1d(32, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): EncoderConvBlock(
          (model): Sequential(
            (0): Sequential(
              (0): Conv1d(64, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (1): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (2): Sequential(
              (0): Conv1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
              (1): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
            )
            (3): Conv1d(32, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
      )
    )
  )
  (decoders): ModuleList(
    (0): Decoder(
      (level_blocks): ModuleList(
        (0): DecoderConvBock(
          (model): Sequential(
            (0): Conv1d(64, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (2): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (3): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (4): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (5): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 64, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
        )
      )
      (out): Conv1d(64, 1, kernel_size=(3,), stride=(1,), padding=(1,))
    )
    (1): Decoder(
      (level_blocks): ModuleList(
        (0): DecoderConvBock(
          (model): Sequential(
            (0): Conv1d(64, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (2): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (3): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (4): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (5): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 64, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
        )
        (1): DecoderConvBock(
          (model): Sequential(
            (0): Conv1d(64, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (2): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 32, kernel_size=(4,), stride=(2,), padding=(1,))
            )
            (3): Sequential(
              (0): Resnet1D(
                (model): Sequential(
                  (0): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(27,), dilation=(27,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (1): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (2): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                  (3): ResConv1DBlock(
                    (model): Sequential(
                      (0): ReLU()
                      (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
                      (2): ReLU()
                      (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
                    )
                  )
                )
              )
              (1): ConvTranspose1d(32, 64, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
        )
      )
      (out): Conv1d(64, 1, kernel_size=(3,), stride=(1,), padding=(1,))
    )
  )
  (bottleneck): Bottleneck(
    (level_blocks): ModuleList(
      (0): BottleneckBlock()
      (1): BottleneckBlock()
    )
  )
)
